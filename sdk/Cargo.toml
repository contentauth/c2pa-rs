[package]
name = "c2pa"
version = "0.40.0"
description = "Rust SDK for C2PA (Coalition for Content Provenance and Authenticity) implementors"
authors = [
    "Maurice Fisher <mfisher@adobe.com>",
    "Gavin Peacock <gpeacock@adobe.com>",
    "Eric Scouten <scouten@adobe.com>",
    "Leonard Rosenthol <lrosenth@adobe.com>",
    "Dave Kozma <dkozma@adobe.com>",
    "Dylan Ross <dyross@adobe.com>"
]
license = "MIT OR Apache-2.0"
documentation = "https://docs.rs/c2pa"
homepage = "https://contentauthenticity.org"
repository = "https://github.com/contentauth/c2pa-rs"
readme = "../README.md"
keywords = ["xmp", "metadata"]
categories = ["api-bindings"]
edition = "2021"
rust-version = "1.81.0"
exclude = ["tests/fixtures"]

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[features]
default = ["v1_api"]
add_thumbnails = ["image"]
file_io = ["openssl_sign"]
serialize_thumbnails = []
no_interleaved_io = ["file_io"]
fetch_remote_manifests = []
openssl = []
openssl_sign = ["openssl"]
json_schema = ["dep:schemars", "c2pa-crypto/json_schema"]
pdf = ["dep:lopdf"]
v1_api = []
unstable_api = []

# The diagnostics feature is unsupported and might be removed.
# It enables some low-overhead timing features used in our development cycle.
diagnostics = []

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(test)'] }
# Workaround for https://github.com/est31/cargo-udeps/issues/293.

[[example]]
name = "client"
required-features = ["file_io"]

[[example]]
name = "show"
required-features = ["file_io"]

[[example]]
name = "v2show"
required-features = ["unstable_api"]

[[example]]
name = "v2api"
required-features = ["unstable_api"]

[lib]
crate-type = ["lib"]

[dependencies]
asn1-rs = "0.6.2"
async-generic = "1.1"
async-recursion = "1.1.1"
async-trait = { version = "0.1.77" }
atree = "0.5.2"
bcder = "0.7.3"
bytes = "1.7.2"
byteorder = { version = "1.4.3", default-features = false }
byteordered = "0.6.0"
c2pa-crypto = { path = "../internal/crypto", version = "0.2.0" }
c2pa-status-tracker = { path = "../internal/status-tracker", version = "0.2.0" }
chrono = { version = "0.4.39", default-features = false, features = [
    "serde",
    "wasmbind",
] }
ciborium = "0.2.2"
config = { version = "0.14.0", default-features = false, features = [
    "json",
    "json5",
    "toml",
    "ron",
    "ini",
] }
conv = "0.3.3"
coset = "0.3.1"
extfmt = "0.1.1"
ed25519-dalek = "2.1.1"
quick-xml = "0.37.1"
hex = "0.4.3"
# Version 1.13.0 doesn't compile under Rust < 1.75, pinning to 1.12.0
id3 = "=1.14.0"
img-parts = "0.3.2"
jfifdump = "0.6.0"
log = "0.4.8"
lopdf = { version = "0.31.0", optional = true }
lazy_static = "1.4.0"
memchr = "2.7.4"
mp4 = "0.14.0"
pem = "3.0.2"
png_pong = "0.9.1"
rand = "0.8.5"
rand_chacha = "0.3.1"
range-set = "0.0.11"
rasn-ocsp = "0.22.0"
rasn-pkix = "0.22.0"
rasn = "0.22.0"
riff = "2.0.0"
schemars = { version = "0.8.21", optional = true }
serde = { version = "1.0.197", features = ["derive"] }
serde_bytes = "0.11.5"
serde_cbor = "0.11.1"
serde_derive = "1.0.197"
serde_json = { version = "1.0.117", features = ["preserve_order"] }
serde_with = "3.11.0"
serde-transcode = "1.1.1"
sha1 = "0.10.6"
sha2 = "0.10.6"
tempfile = "3.10.1"
thiserror = "2.0.8"
treeline = "0.1.0"
url = "2.5.3"
uuid = { version = "1.10.0", features = ["serde", "v4", "js"] }
x509-parser = "0.16.0"
x509-certificate = "0.21.0"
zip = { version = "2.2.1", default-features = false }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
ureq = "2.4.0"
image = { version = "0.24.7", default-features = false, features = [
    "jpeg",
    "png",
], optional = true }

[target.'cfg(target_arch = "wasm32")'.dependencies]
console_log = { version = "1.0.0", features = ["color"] }
getrandom = { version = "0.2.7", features = ["js"] }
js-sys = "0.3.58"
rand_core = "0.9.0-alpha.2"
rsa = { version = "0.9.6", features = ["sha2"] }
serde-wasm-bindgen = "0.6.5"
spki = "0.7.3"
wasm-bindgen = "0.2.83"
wasm-bindgen-futures = "0.4.31"
web-sys = { version = "0.3.58", features = [
    "Crypto",
    "SubtleCrypto",
    "CryptoKey",
    "Window",
    "WorkerGlobalScope",
] }

[dev-dependencies]
anyhow = "1.0.40"
mockall = "0.13.1"
c2pa = { path = ".", default-features = false, features = [
    "unstable_api",
] } # allow integration tests to use the new API
glob = "0.3.1"
jumbf = "0.4.0"

[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
wasm-bindgen-test = "0.3.31"

[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
actix = "0.13.1"
tokio = { version = "1.36.0", features = ["full"] }
