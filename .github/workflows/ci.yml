# A minimal set of tests to catch common issues.

# See release_readiness.yml for a more complete suite of tests.
# You can add the label "check-release" to any PR to invoke that
# larger set of tests.

name: CI

on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - labeled
  push:
    branches:
      - main

jobs:
  get-features:
    name: Get features
    runs-on: ubuntu-latest
    outputs:
      rust-native-features: ${{ steps.get-features.outputs.rust-native-features }}
      openssl-features: ${{ steps.get-features.outputs.openssl-features }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Get all features
        id: get-features
        run: |
          FEATURES=$(cargo metadata --format-version=1 | jq -r '[.packages[] | select(.name=="c2pa") | .features | keys | map(select(. != "default")) | .[]] | unique | join(" ")')
          RUST_NATIVE_FEATURES=$(echo $FEATURES | sed 's/openssl//g')
          OPENSSL_FEATURES=$(echo $FEATURES | sed 's/rust_native_crypto//g')
          echo "rust-native-features=$RUST_NATIVE_FEATURES" >> "$GITHUB_OUTPUT"
          echo "openssl-features=$OPENSSL_FEATURES" >> "$GITHUB_OUTPUT"

  tests-openssl:
    name: Unit tests (OpenSSL installed)
    needs: get-features
    if: |
      github.event_name != 'pull_request' ||
      github.event.pull_request.author_association == 'COLLABORATOR' ||
      github.event.pull_request.author_association == 'MEMBER' ||
      github.event.pull_request.user.login == 'dependabot[bot]' ||
      contains(github.event.pull_request.labels.*.name, 'safe to test')

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate code coverage for OpenSSL
        env:
          RUST_BACKTRACE: "1"
          FEATURES: ${{needs.get-features.outputs.openssl-features}}
        run: |
          cargo llvm-cov --lib --features "$FEATURES" --lcov --output-path lcov-openssl.info

      # Tokens aren't available for PRs originating from forks,
      # so we don't attempt to upload code coverage in that case.
      - name: Upload code coverage results
        if: |
          github.event_name != 'pull_request' ||
          github.event.pull_request.author_association == 'COLLABORATOR' ||
          github.event.pull_request.author_association == 'MEMBER' ||
          github.event.pull_request.user.login == 'dependabot[bot]'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true
          files: ./lcov-openssl.info,./lcov-rust_native_crypto.info

  tests-rust-native-crypto:
    name: Unit tests (Rust native crypto installed)
    needs: get-features
    if: |
      github.event_name != 'pull_request' ||
      github.event.pull_request.author_association == 'COLLABORATOR' ||
      github.event.pull_request.author_association == 'MEMBER' ||
      github.event.pull_request.user.login == 'dependabot[bot]' ||
      contains(github.event.pull_request.labels.*.name, 'safe to test')

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate code coverage for rust_native_crypto
        env:
          RUST_BACKTRACE: "1"
          FEATURES: ${{needs.get-features.outputs.rust-native-features}}
        run: |
          cargo llvm-cov -p c2pa --no-default-features --features "$FEATURES" --lcov --output-path lcov-rust_native_crypto.info

      # Tokens aren't available for PRs originating from forks,
      # so we don't attempt to upload code coverage in that case.
      - name: Upload code coverage results
        if: |
          github.event_name != 'pull_request' ||
          github.event.pull_request.author_association == 'COLLABORATOR' ||
          github.event.pull_request.author_association == 'MEMBER' ||
          github.event.pull_request.user.login == 'dependabot[bot]'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true
          files: ./lcov-openssl.info,./lcov-rust_native_crypto.info

  tests-cli:
    name: Unit tests (c2patool)
    needs: get-features
    if: |
      github.event_name != 'pull_request' ||
      github.event.pull_request.author_association == 'COLLABORATOR' ||
      github.event.pull_request.author_association == 'MEMBER' ||
      github.event.pull_request.user.login == 'dependabot[bot]' ||
      contains(github.event.pull_request.labels.*.name, 'safe to test')

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate code coverage
        env:
          RUST_BACKTRACE: "1"
          FEATURES: ${{needs.get-features.outputs.openssl-features}}
        run: |
          cargo llvm-cov --bins --features "$FEATURES" --lcov --output-path lcov.info

      # Tokens aren't available for PRs originating from forks,
      # so we don't attempt to upload code coverage in that case.
      - name: Upload code coverage results
        if: |
          github.event_name != 'pull_request' ||
          github.event.pull_request.author_association == 'COLLABORATOR' ||
          github.event.pull_request.author_association == 'MEMBER' ||
          github.event.pull_request.user.login == 'dependabot[bot]'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true
          files: ./lcov-openssl.info,./lcov-rust_native_crypto.info

  doc-tests:
    name: Doc tests (requires nightly Rust)
    needs: get-features
    # TODO: Remove this once cargo-llvm-cov can run doc tests and generate
    # coverage. (This requires a bug fix that is only available in nightly Rust.)
    # Watch https://github.com/taiki-e/cargo-llvm-cov/issues/2
    # for progress.

    if: |
      github.event_name != 'pull_request' ||
      github.event.pull_request.author_association == 'COLLABORATOR' ||
      github.event.pull_request.author_association == 'MEMBER' ||
      github.event.pull_request.user.login == 'dependabot[bot]' ||
      contains(github.event.pull_request.labels.*.name, 'safe to test')

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      # Disabling code coverage for doc tests due to a new bug in Rust nightly
      # as of 2025-01-08. Will investigate later to see if there's a repro case.
      # Meanwhile, simply run the tests so we know if there are any failing
      # doc tests.

      - name: Run doc tests (COVERAGE DISABLED)
        env:
          FEATURES: ${{needs.get-features.outputs.openssl-features}}
        run: |
          cargo test --workspace --features "$FEATURES" --doc

      # - name: Generate code coverage
      #   env:
      #     RUST_BACKTRACE: "1"
      #     FEATURES: ${{needs.get-features.outputs.openssl-features}}
      #   run: |
      #   cargo llvm-cov --workspace --features "$FEATURES" --lcov --doctests --output-path lcov.info

      # Tokens aren't available for PRs originating from forks,
      # so we don't attempt to upload code coverage in that case.
      # - name: Upload code coverage results
      #   if: |
      #     github.event_name != 'pull_request' ||
      #     github.event.pull_request.author_association == 'COLLABORATOR' ||
      #     github.event.pull_request.author_association == 'MEMBER' ||
      #     github.event.pull_request.user.login == 'dependabot[bot]'
      #   uses: codecov/codecov-action@v5
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     fail_ci_if_error: true
      #     verbose: true

  cargo-check:
    name: Default features build
    if: |
      github.event_name != 'pull_request' ||
      github.event.pull_request.author_association == 'COLLABORATOR' ||
      github.event.pull_request.author_association == 'MEMBER' ||
      github.event.pull_request.user.login == 'dependabot[bot]' ||
      contains(github.event.pull_request.labels.*.name, 'safe to test')

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: "`cargo check` with default features"
        run: cargo check

  tests-wasm:
    name: Unit tests (Wasm)
    needs: get-features
    if: |
      github.event_name != 'pull_request' ||
      github.event.pull_request.author_association == 'COLLABORATOR' ||
      github.event.pull_request.author_association == 'MEMBER' ||
      github.event.pull_request.user.login == 'dependabot[bot]' ||
      contains(github.event.pull_request.labels.*.name, 'safe to test')

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Set up Chrome
        id: setup-chrome
        uses: browser-actions/setup-chrome@v2
        with:
          chrome-version: 140
          install-chromedriver: true

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Run Wasm tests
        run: wasm-pack test --chrome --chromedriver ${{ steps.setup-chrome.outputs.chromedriver-path }} --headless --no-default-features --features rust_native_crypto,fetch_remote_manifests
        working-directory: ./sdk
        env:
          WASM_BINDGEN_TEST_TIMEOUT: 60

  benchmarks:
    name: Run benchmarks on signing and reading
    if: |
      github.event_name != 'pull_request' ||
      github.event.pull_request.author_association == 'COLLABORATOR' ||
      github.event.pull_request.author_association == 'MEMBER' ||
      github.event.pull_request.user.login == 'dependabot[bot]' ||
      contains(github.event.pull_request.labels.*.name, 'safe to test')

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@main

      - name: Install cargo-codspeed
        run: cargo binstall --no-confirm cargo-codspeed

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build the benchmark target(s)
        run: cargo codspeed build -p c2pa --no-default-features --features rust_native_crypto

      - name: Run the benchmarks
        uses: CodSpeedHQ/action@v3
        with:
          run: cargo codspeed run
          token: ${{ secrets.CODSPEED_TOKEN }}

  tests-wasi:
    name: Unit tests (WASI)
    needs: get-features
    if: |
      github.event_name != 'pull_request' ||
      github.event.pull_request.author_association == 'COLLABORATOR' ||
      github.event.pull_request.author_association == 'MEMBER' ||
      github.event.pull_request.user.login == 'dependabot[bot]' ||
      contains(github.event.pull_request.labels.*.name, 'safe to test')

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

        # nightly required for testing until this issue is resolved:
        # wasip2 target should not conditionally feature gate stdlib APIs rust-lang/rust#130323 https://github.com/rust-lang/rust/issues/130323
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2025-08-25

      - name: Install wasmtime
        run: |
          curl https://wasmtime.dev/install.sh -sSf | bash
          echo "$HOME/.wasmtime/bin" >> $GITHUB_PATH

      - name: Install WASI SDK
        run: |
          if [ "${RUNNER_ARCH}" = "X64" ]; then
            ARCH="x86_64";
          else
            ARCH="${RUNNER_ARCH}";
          fi
          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-25/wasi-sdk-25.0-${ARCH}-${RUNNER_OS}.tar.gz
          tar xf wasi-sdk-25.0-${ARCH}-${RUNNER_OS}.tar.gz
          mv $(echo wasi-sdk-25.0-${ARCH}-${RUNNER_OS} | tr '[:upper:]' '[:lower:]') /opt/wasi-sdk

      - name: Add wasm32-wasip2 target
        run: rustup target add --toolchain nightly-2025-08-25 wasm32-wasip2

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run WASI tests (c2pa-rs)
        env:
          CARGO_TARGET_WASM32_WASIP2_RUNNER: "wasmtime -S cli -S http --dir ."
          CC: /opt/wasi-sdk/bin/clang
          WASI_SDK_PATH: /opt/wasi-sdk
          RUST_MIN_STACK: 16777216
          FEATURES: ${{needs.get-features.outputs.rust-native-features}}
        run: |
          cargo +nightly-2025-08-25 test --target wasm32-wasip2 -p c2pa --features "$FEATURES" --no-default-features -- --no-capture

  clippy_check:
    name: Clippy
    needs: get-features
    if: |
      github.event_name != 'pull_request' ||
      github.event.pull_request.author_association == 'COLLABORATOR' ||
      github.event.pull_request.author_association == 'MEMBER' ||
      github.event.pull_request.user.login == 'dependabot[bot]' ||
      contains(github.event.pull_request.labels.*.name, 'safe to test')

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run Clippy
        env:
          FEATURES: ${{needs.get-features.outputs.openssl-features}}
        run: |
          cargo clippy --features "$FEATURES" --all-targets -- -Dwarnings

  cargo_fmt:
    name: Enforce Rust code format
    if: |
      github.event_name != 'pull_request' ||
      github.event.pull_request.author_association == 'COLLABORATOR' ||
      github.event.pull_request.author_association == 'MEMBER' ||
      github.event.pull_request.user.login == 'dependabot[bot]' ||
      contains(github.event.pull_request.labels.*.name, 'safe to test')

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2025-07-28
          components: rustfmt

      - name: Check format
        run: cargo +nightly-2025-07-28 fmt --all -- --check

  cargo-deny:
    name: License / vulnerability audit
    if: |
      github.event_name != 'pull_request' ||
      github.event.pull_request.author_association == 'COLLABORATOR' ||
      github.event.pull_request.author_association == 'MEMBER' ||
      github.event.pull_request.user.login == 'dependabot[bot]' ||
      contains(github.event.pull_request.labels.*.name, 'safe to test')

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Audit crate dependencies
        uses: EmbarkStudios/cargo-deny-action@v2
        with:
          command: check advisories bans licenses sources
