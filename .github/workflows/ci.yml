name: CI

on:  
  pull_request:
  push:
    branches: main

jobs:
  tests:
    name: Unit tests
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        rust_version: [stable]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust_version }}
          components: llvm-tools-preview
          override: true

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v1

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload code coverage results
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: ${{ matrix.os != 'macos-latest' }}
            # Disregard build errors on Mac until
            # https://github.com/codecov/codecov-action/issues/745
            # is fixed.
          verbose: true

  tests-msrv:
    name: Unit tests
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        rust_version: [1.59.0]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust_version }}
          override: true

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v1

      # Note that we do not run code coverage because
      # it was not stabilized as of 1.59.0.

      - name: Run self tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          # args: --all-targets --all-features --workspace (waiting on bug fix)
          args: --all-features --workspace

  wasm_tests:
    name: Wasm tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Run Wasm tests
        run: wasm-pack test --chrome --headless
        working-directory: ./sdk

  publish-preflight:
    name: Preflight crate publish
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        rust_version: [stable]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust_version }}
          components: llvm-tools-preview
          override: true

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v1

      - name: Dry-run of crate publish
        run: cargo publish -p c2pa --dry-run

  clippy_check:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install clippy
        run: rustup component add clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v1

      - name: Cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --all-targets -- -D warnings
        env:
          RUST_BACKTRACE: "1"

  cargo_fmt:
    name: Enforce Rust code format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rustfmt

      - name: Check format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  docs_rs:
    name: Preflight docs.rs build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Install nightly Rust toolchain
        # Nightly is used here because the docs.rs build
        # uses nightly and we use doc_cfg features that are
        # not in stable Rust as of this writing (Rust 1.62).
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Run cargo docs
        # This is intended to mimic the docs.rs build
        # environment. The goal is to fail PR validation
        # if the subsequent release would result in a failed
        # documentation build on docs.rs.
        run: cargo +nightly doc --all-features
        env:
          RUSTDOCFLAGS: --cfg docsrs
          DOCS_RS: 1

  cargo-deny:
    name: License / vulnerability audit
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        checks:
          - advisories
          - bans licenses sources

    # Prevent sudden announcement of a new advisory from failing CI:
    continue-on-error: ${{ matrix.checks == 'advisories' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Audit crate dependencies
        uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check ${{ matrix.checks }}

  unused_deps:
    name: Check for unused dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Run cargo-udeps
        uses: aig787/cargo-udeps-action@v1
        with:
          version: latest
          args: --all-targets --all-features
